@page "{currentPage:int?}"
@using Newtonsoft.Json
@model MealMentor.Manager.Pages.AdminPages.ReportModel
@{
    ViewData["Title"] = "Admin Report";
    var currentWeekCount = Model.AdminReport?.WeeklyPaidUserCount?.CurrentWeekCount ?? 0;
    var previousWeekCount = Model.AdminReport?.WeeklyPaidUserCount?.PreviousWeekCount ?? 0;
    var difference = currentWeekCount - previousWeekCount;
    var percentageDifference = previousWeekCount != 0 ? (difference / (double)previousWeekCount) * 100 : 0;
}

<div class="container-fluid py-4">
    <div class="row g-4 mb-4">
        <div class="col-12 col-md-3">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Total Users</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.TotalUser ?? 0)</div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Total Paid Users</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.TotalPaidUser ?? 0)</div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Total Revenue</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.TotalRevenue.ToString("F2") ?? "0.00") VNĐ</div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Total Recipes</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.TotalRecipeCount ?? 0)</div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-12 col-md-6">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Weekly New Users</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.WeeklyUserCount ?? 0)</div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Weekly Paid Users</h6>
                </div>
                <div class="card-body">
                    <div class="stat-value">@(Model.AdminReport?.WeeklyPaidUserCount?.CurrentWeekCount ?? 0)</div>
                    <div class="stat-label" style="color: @(difference >= 0 ? "green" : "red")">
                        Difference then previous week: @(difference >= 0 ? "+" : "")@difference (@(percentageDifference >= 0 ? "+" : "")@percentageDifference.ToString("F2")%)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-12 col-lg-6">
            <div class="chart-container">
                <h3 class="chart-title">Weekly Revenue</h3>
                <canvas id="weeklyRevenueChart"></canvas>
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <div class="chart-container">
                <h3 class="chart-title">Number of recipes per Month</h3>
                <canvas id="recipeCountChart"></canvas>
            </div>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-12 col-md-6">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Latest Purchases</h6>
                </div>
                <div class="card-body">
                    @if (Model.AdminReport?.LatestOrders?.Items != null)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Customer</th>
                                    <th>Plan</th>
                                    <th>Individual</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in Model.AdminReport.LatestOrders.Items)
                                {
                                    <tr>
                                        <td>@order.UserName</td>
                                        <td>Premium Subscription</td>
                                        <td>@order.LifeTime month</td>
                                        <td>@order.Price</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" asp-page-handler="OnGet" asp-route-currentPage="@(Model.CurrentPage - 1)">Previous</a>
                                </li>
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                        <a class="page-link" asp-page-handler="OnGet" asp-route-currentPage="@i">@i</a>
                                    </li>
                                }
                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" asp-page-handler="OnGet" asp-route-currentPage="@(Model.CurrentPage + 1)">Next</a>
                                </li>
                            </ul>
                        </nav>
                    }
                    else
                    {
                        <p>No latest orders data available.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="dashboard-card">
                <div class="card-header">
                    <h6>Most Liked Recipes</h6>
                </div>
                <div class="card-body">
                    @if (Model.AdminReport?.MostLikedRecipe != null)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Recipe Name</th>
                                    <th>Like Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var recipe in Model.AdminReport.MostLikedRecipe)
                                {
                                    <tr>
                                        <td>@recipe.RecipeName</td>
                                        <td>@recipe.LikeQuantity</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No most liked recipes data available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Weekly Revenue Chart
        var ctxRevenue = document.getElementById('weeklyRevenueChart').getContext('2d');
        var weeklyRevenueData = @Html.Raw(JsonConvert.SerializeObject(Model.AdminReport?.WeeklyRevenue ?? new Dictionary<int, int>()));

        var revenueLabels = Object.keys(weeklyRevenueData).map(function (key) {
            return 'Week ' + key;
        });

        var revenueData = Object.values(weeklyRevenueData);

        var revenueChart = new Chart(ctxRevenue, {
            type: 'line',
            data: {
                labels: revenueLabels,
                datasets: [{
                    label: 'Weekly Revenue',
                    data: revenueData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 10
                        }
                    }
                }
            }
        });

        // Recipe Count Every Month Chart
        var ctxRecipeCount = document.getElementById('recipeCountChart').getContext('2d');
        var recipeCountData = @Html.Raw(JsonConvert.SerializeObject(Model.AdminReport?.RecipeCountEveryMonth ?? new Dictionary<string, int>()));

        var recipeCountLabels = Object.keys(recipeCountData);
        var recipeCountValues = Object.values(recipeCountData);

        var recipeCountChart = new Chart(ctxRecipeCount, {
            type: 'bar',
            data: {
                labels: recipeCountLabels,
                datasets: [{
                    label: 'Recipe Count',
                    data: recipeCountValues,
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 10
                        }
                    }
                }
            }
        });
    });
</script>
<style>
    .dashboard-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        height: 92%;
    }

        .dashboard-card:hover {
            transform: translateY(-4px);
        }

    .card-header {
        background: #f8f9fa;
        border-radius: 12px 12px 0 0;
        border-bottom: none;
        padding: 1.25rem;
    }

        .card-header h3 {
            color: #1e293b;
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
        }

    .card-body {
        padding: 1.5rem;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2563eb;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: #64748b;
        font-size: 0.875rem;
    }

    .chart-container {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .chart-title {
        color: #1e293b;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }

    @@media (max-width: 768px) {
        .chart-container {
            margin-bottom: 1rem;
        }
    }

    body {
        background: linear-gradient(90deg, #9DC08B 19.71%, #EDF1D6 52.8%, #609966 100%);
    }
</style>
